{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\BHAKTEE\\\\Documents\\\\CitiBridge\\\\Workflow\\\\Group14\\\\New-Frontend-Using-React-and-MUI\\\\arbitrage-system-frontend\\\\src\\\\components\\\\recommendator\\\\Recommender.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { TextField } from '@mui/material';\nimport Typography from '@mui/material/Typography';\nimport SideBarComponent from './SideBarComponent';\nimport './Recommender.css';\nimport RecommendedStocks from './RecommendedStocks';\nimport StockList from '../StockList';\nimport StocksTableView from './StocksTableView';\nimport GridTableViewToggle from './GridTableViewToggle';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Recommender() {\n  _s();\n  const [gotStocks, setGotStocks] = useState(false);\n  const [isFirt, setIsFirst] = useState(false);\n  const [stocks, setStocks] = useState([]);\n  const handleSubmit = () => {\n    //fetch the data for first time\n    if (isFirt) {\n      getData('');\n      gotStocks = true;\n    } else {\n      getData('');\n      gotStocks = true;\n    }\n  };\n\n  // const getData = (url) => {\n  //     //get it for first time\n  //     const intervalId = setInterval(() => {\n  //         fetch(url)\n  //         .then((response) => response.json())\n  //         .then((data) => {\n  //           setStocks(data)\n  //           console.log(stocks)\n  //         //   localStorage.setItem('stocks', JSON.stringify(data));\n\n  //         })\n  //         .catch((error) => console.error('Error fetching data:', error));\n  //       }, 15000);\n  //       return () => clearInterval(intervalId);\n  // }\n\n  const fetchData = async url => {\n    try {\n      const response = await fetch('https://api.example.com/data');\n      const newData = await response.json();\n\n      // Use functional state update to merge new data with existing data\n      setData(prevData => [...prevData, ...newData]);\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  };\n  useEffect(() => {\n    fetchData();\n    const intervalId = setInterval(fetchData, 15000);\n\n    // Clean up the interval when the component unmounts\n    return () => clearInterval(intervalId);\n    // getData('http://localhost:8080/getStockDetails')\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"recommender-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        flex: '30%',\n        marginRight: '20px'\n      },\n      children: /*#__PURE__*/_jsxDEV(SideBarComponent, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(StocksTableView, {\n      stocks: stocks\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 9\n  }, this);\n}\n_s(Recommender, \"0R/ziHHkO5AR3piA8J10SPVNaZk=\");\n_c = Recommender;\nexport default Recommender;\nvar _c;\n$RefreshReg$(_c, \"Recommender\");","map":{"version":3,"names":["React","useState","useEffect","TextField","Typography","SideBarComponent","RecommendedStocks","StockList","StocksTableView","GridTableViewToggle","jsxDEV","_jsxDEV","Recommender","_s","gotStocks","setGotStocks","isFirt","setIsFirst","stocks","setStocks","handleSubmit","getData","fetchData","url","response","fetch","newData","json","setData","prevData","error","console","intervalId","setInterval","clearInterval","className","children","style","display","flex","marginRight","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/BHAKTEE/Documents/CitiBridge/Workflow/Group14/New-Frontend-Using-React-and-MUI/arbitrage-system-frontend/src/components/recommendator/Recommender.js"],"sourcesContent":["import React, {useState, useEffect} from 'react'\r\nimport { TextField } from '@mui/material'\r\nimport Typography from '@mui/material/Typography';\r\nimport SideBarComponent from './SideBarComponent';\r\nimport './Recommender.css'\r\nimport RecommendedStocks from './RecommendedStocks';\r\nimport StockList from '../StockList';\r\nimport StocksTableView from './StocksTableView';\r\nimport GridTableViewToggle from './GridTableViewToggle';\r\n\r\n\r\nfunction Recommender() {\r\n    const [gotStocks, setGotStocks] = useState(false);\r\n    const [isFirt, setIsFirst] = useState(false);\r\n    const [stocks, setStocks] = useState([]);\r\n\r\n    const handleSubmit = () => {\r\n        //fetch the data for first time\r\n        if(isFirt){\r\n            getData('')\r\n            gotStocks = true;\r\n        }\r\n        else{\r\n            getData('')\r\n            gotStocks = true;\r\n        }\r\n    }\r\n\r\n    // const getData = (url) => {\r\n    //     //get it for first time\r\n    //     const intervalId = setInterval(() => {\r\n    //         fetch(url)\r\n    //         .then((response) => response.json())\r\n    //         .then((data) => {\r\n    //           setStocks(data)\r\n    //           console.log(stocks)\r\n    //         //   localStorage.setItem('stocks', JSON.stringify(data));\r\n\r\n    //         })\r\n    //         .catch((error) => console.error('Error fetching data:', error));\r\n    //       }, 15000);\r\n    //       return () => clearInterval(intervalId);\r\n    // }\r\n\r\n    const fetchData = async (url) => {\r\n        try {\r\n          const response = await fetch('https://api.example.com/data');\r\n          const newData = await response.json();\r\n  \r\n          // Use functional state update to merge new data with existing data\r\n          setData(prevData => [...prevData, ...newData]);\r\n        } catch (error) {\r\n          console.error('Error fetching data:', error);\r\n        }\r\n      };\r\n\r\n    \r\n\r\n    useEffect(() =>{\r\n        fetchData();\r\n        const intervalId = setInterval(fetchData, 15000);\r\n\r\n    // Clean up the interval when the component unmounts\r\n        return () => clearInterval(intervalId);\r\n        // getData('http://localhost:8080/getStockDetails')\r\n    }, [])\r\n      \r\n    return (\r\n        <div className='recommender-container'>\r\n            <div style={{\r\n                display: 'flex',\r\n                flex: '30%',\r\n                marginRight: '20px'\r\n            }}>\r\n            <SideBarComponent/>\r\n            {/*</div>\r\n            <div style={{\r\n                display: 'flex',\r\n                flexDirection: 'column',\r\n                flex: '65%',\r\n            }}>\r\n                <Typography variant=\"h3\" color=\"text.secondary\" gutterBottom\r\n                style={{\r\n                    textAlign: 'center',\r\n                    marginTop: 20,\r\n                    marginBottom: 20,\r\n                    color: 'black',\r\n                }}>\r\n                    Arbitrage Recommender\r\n                </Typography>\r\n                <Typography variant='h6'\r\n                style={{\r\n                    textAlign: 'center',\r\n                    marginTop: 20,\r\n                    marginBottom: 20,\r\n                    color: 'grey',\r\n                    // fontWeight: 'bold',\r\n                    minWidth: '100px',\r\n                }}>Choose the index and get recommendations based on that index.</Typography> */}\r\n            </div>\r\n\r\n            {/* <RecommendedStocks stockList = {stocks}/> */}\r\n            {/* <StockList stockList = {stocks}/> */}\r\n            <StocksTableView stocks = {stocks}/>\r\n\r\n        </div>\r\n  )\r\n}\r\n\r\nexport default Recommender"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,QAAQ,EAAEC,SAAS,QAAO,OAAO;AAChD,SAASC,SAAS,QAAQ,eAAe;AACzC,OAAOC,UAAU,MAAM,0BAA0B;AACjD,OAAOC,gBAAgB,MAAM,oBAAoB;AACjD,OAAO,mBAAmB;AAC1B,OAAOC,iBAAiB,MAAM,qBAAqB;AACnD,OAAOC,SAAS,MAAM,cAAc;AACpC,OAAOC,eAAe,MAAM,mBAAmB;AAC/C,OAAOC,mBAAmB,MAAM,uBAAuB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGxD,SAASC,WAAWA,CAAA,EAAG;EAAAC,EAAA;EACnB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACe,MAAM,EAAEC,UAAU,CAAC,GAAGhB,QAAQ,CAAC,KAAK,CAAC;EAC5C,MAAM,CAACiB,MAAM,EAAEC,SAAS,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EAExC,MAAMmB,YAAY,GAAGA,CAAA,KAAM;IACvB;IACA,IAAGJ,MAAM,EAAC;MACNK,OAAO,CAAC,EAAE,CAAC;MACXP,SAAS,GAAG,IAAI;IACpB,CAAC,MACG;MACAO,OAAO,CAAC,EAAE,CAAC;MACXP,SAAS,GAAG,IAAI;IACpB;EACJ,CAAC;;EAED;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA,MAAMQ,SAAS,GAAG,MAAOC,GAAG,IAAK;IAC7B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;MAC5D,MAAMC,OAAO,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;;MAErC;MACAC,OAAO,CAACC,QAAQ,IAAI,CAAC,GAAGA,QAAQ,EAAE,GAAGH,OAAO,CAAC,CAAC;IAChD,CAAC,CAAC,OAAOI,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC9C;EACF,CAAC;EAIH5B,SAAS,CAAC,MAAK;IACXoB,SAAS,CAAC,CAAC;IACX,MAAMU,UAAU,GAAGC,WAAW,CAACX,SAAS,EAAE,KAAK,CAAC;;IAEpD;IACI,OAAO,MAAMY,aAAa,CAACF,UAAU,CAAC;IACtC;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,oBACIrB,OAAA;IAAKwB,SAAS,EAAC,uBAAuB;IAAAC,QAAA,gBAClCzB,OAAA;MAAK0B,KAAK,EAAE;QACRC,OAAO,EAAE,MAAM;QACfC,IAAI,EAAE,KAAK;QACXC,WAAW,EAAE;MACjB,CAAE;MAAAJ,QAAA,eACFzB,OAAA,CAACN,gBAAgB;QAAAoC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAyBd,CAAC,eAINjC,OAAA,CAACH,eAAe;MAACU,MAAM,EAAIA;IAAO;MAAAuB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEnC,CAAC;AAEd;AAAC/B,EAAA,CAhGQD,WAAW;AAAAiC,EAAA,GAAXjC,WAAW;AAkGpB,eAAeA,WAAW;AAAA,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}